pipeline {
    agent any

    // Install the Jenkins tools you need for your project / environment
    tools {nodejs "Nodejs14"}

    // Pull your Snyk token from a Jenkins encrypted credential
    // (type "Secret text"... see https://jenkins.io/doc/book/using/using-credentials/#adding-new-global-credentials)
    // and put it in temporary environment variable for the Snyk CLI to consume.
    environment {
        SNYK_TOKEN = credentials('Alexandra_Snyktoken')
    }

    stages {

        stage('Initialize & Cleanup Workspace') {
            steps {
               println 'Initialize & Cleanup Workspace'
               cleanWs()
            }
        }

        stage('Git Clone') {
            steps {
                git url: 'https://github.com/ACsnyk/snyk-goof.git'
                sh 'ls -la'
                sh  "npm install"
            }
        }

        //Check https://docs.snyk.io/snyk-cli/install-the-snyk-cli on ways to install the Snyk CLI
        stage('Download Snyk CLI') {
            steps {
                script{
                latest_version=sh(script: """
                curl -LIs "https://github.com/snyk/snyk/releases/latest" | grep "^location" |awk -F'/' '{print \$NF}' | tail -1
                """, returnStdout: true).trim()
                println "[INFO] Extracted latest version: ${latest_version}"
                snyk_cli_dl_linux="https://github.com/snyk/snyk/releases/download/${latest_version}/snyk-linux"
                println "[INFO] Extracted download link for linux: ${snyk_cli_dl_linux}"
                sh """
                    curl -Lo ./snyk "${snyk_cli_dl_linux}"
                    chmod +x snyk
                    ls -la
                    ./snyk -v
                """
                }
            }
        }
        
        
         stage('Build Docker Image') {
             steps {
                 script{
                 sh 'docker build . --tag Goof:Demo'
                 sh 'docker image ls'
             }
             }
         }

        // Run snyk test to check for vulnerabilities and fail the build if any are found
        // Consider using --severity-threshold=<low|medium|high> for more granularity (see snyk help for more info).
          stage('Snyk Container Test using Snyk CLI') {
            steps {
                script{
                    try{
                sh './snyk container test Goof:Demo'
                }
                catch (exception) {
                    println "[WARN] Snyk code test command failed due to:\n${exception}"
                }
                sh 'docker image rm Goof:Demo'
              }
            }
        }

        // Capture the dependency tree for ongoing monitoring in Snyk.
        // This is typically done after deployment to some environment (ex staging, test, production, etc).
        stage('Snyk Monitor using Snyk CLI') {
            steps {
                // Use your own Snyk Organization with --org=<your-org>
                sh './snyk monitor --org=alexandra.catana'
            }
        }
    }
    post { 
        always { 
            cleanWs()
        }
    }    
}